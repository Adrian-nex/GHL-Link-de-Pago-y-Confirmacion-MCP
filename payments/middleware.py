"""
Middleware personalizado para la aplicaci√≥n de pagos
"""

import logging

logger = logging.getLogger(__name__)


class RequestLoggingMiddleware:
    """
    Middleware para registrar informaci√≥n de las peticiones HTTP con formato mejorado
    """

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # C√≥digo antes de que se procese la vista
        method = request.method
        path = request.path

        # Solo loguear ciertos endpoints importantes
        if "/webhooks/" in path or "/api/" in path:
            # Formatear el log de entrada
            if method == "POST":
                logger.info(f"[REQUEST] üì• {method} {path}")
            elif method == "GET":
                logger.info(f"[REQUEST] üì§ {method} {path}")
            else:
                logger.info(f"[REQUEST] {method} {path}")

        # Procesar la petici√≥n
        response = self.get_response(request)

        # C√≥digo despu√©s de que se procese la vista
        if "/webhooks/" in path or "/api/" in path:
            # Colorear seg√∫n status code
            status = response.status_code
            if 200 <= status < 300:
                status_icon = "‚úì"
            elif 400 <= status < 500:
                status_icon = "‚ö†"
            else:
                status_icon = "‚úó"

            logger.info(f"[RESPONSE] {status_icon} {method} {path} ‚Üí {status}")

        return response
